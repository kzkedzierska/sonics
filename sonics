"""
usage: sonics [-h] [-o out_path] [-n file_name] [-p n_processes] [-t n_strict]
              [-y n_pcr_cycles] [-c n_after_capture] [-b block_id]
              [-a sample_name] [-r n_repetitions] [-g p_adjust_threshold]
              [-i lnL_threshold] [-s n_star_copies] [-l noise_threshold]
              [-f n_floor] [-j n_one_allele_threshold] [-e MIN MAX]
              [-d MIN MAX] [-u MIN MAX] [-k MIN MAX] [--add_ratios ratios]
              [-m] [--monte_carlo] [--random] [--save_report]
              [--up_preference] [-v] [--version]
              INPUT

SONiCS - Stutter mONte Carlo Simulation. SONiCS is a stutter correction
algorithm based on derivative of Monte Carlo approach. Briefly, SONiCS models
independent PCR reactions where set of reaction parameters including the
efficiency of amplification, efficiency of capture, and the probability of
polymerase slippage modeled separately for insertions and deletions are drawn
from weak uniform priors based on experimental observations or user inputs.
Initial alleles are chosen randomly. For each simulation sonics assigns log-
likelihood (lnL) value describing the probability of generating the input
readout from the PCR pool created in a given simulation. When a certain number
of simulations are generated Mann-Whitney U test between the lnL distributions
is performed and lnL ratios are calculated (for maximal and 75th percentile
values). If the conditions of the successful run are not met SONiCS performs
additional simulations until the maximum number of repetitions is reached, or
it can call a genotype. As a result, program reports the called genotype
together with descriptors of the best model. SONiCS can also be run in
strictly Monte Carlo mode (with the option --monte_carlo). For more look in
the README file.

positional arguments:
  INPUT                 Either:allele composition - number of reads per
                        allele, example: all1|reads;all2|reads or path to a
                        VCF file if run with --vcf_mode option

optional arguments:
  -h, --help            show this help message and exit
  -o out_path, --out_path out_path
                        Directory where output files will be stored. Warning:
                        SONiCS will overwrite results from previous runs
                        stored in the same directory if the file name won't be
                        changed. Default: .
  -n file_name, --file_name file_name
                        Output file name. Default: sonics_out.txt
  -p n_processes, --processes n_processes
                        Number of sub-processes used in multiprocessing mode.
                        It can be understood as additional processes lunched
                        by the main sonics process and 0 means that SONiCS
                        won't lunch additional processes. This option is valid
                        only in VCF mode. Default: 0
  -t n_strict, --strict n_strict
                        What to do when encountered partial repetitions of the
                        motif while parsing the VCF file. Options: 0 - pick on
                        random one of the closest alleles, 1 - exclude given
                        STR, 2 - exclude given genotype. Default: 1
  -y n_pcr_cycles, --pcr_cycles n_pcr_cycles
                        Number of PCR cycles before introducing capture step.
                        Default: 12
  -c n_after_capture, --after_capture n_after_capture
                        How many cycles of PCR amplification were performed
                        after introducing capture step. Default: 12
  -b block_id, --block block_id
                        Block name, valid only with string genotype as input.
                        Default: Block
  -a sample_name, --name sample_name
                        Sample name, valid only with string genotype as input.
                        Default: sample
  -r n_repetitions, --repetitions n_repetitions
                        Number of maximum repetitions in the simulations.
                        Default: 1000
  -g p_adjust_threshold, --padjust p_adjust_threshold
                        Adjusted p-value threshold for selecting the allele.
                        Default: 0.001
  -i lnL_threshold, --lnL_threshold lnL_threshold
                        Log-likelihood (lnL) ratio threshold. Default: 2.3
  -s n_star_copies, --start_copies n_star_copies
                        Number of start copies. Default: 300000
  -l noise_threshold, --noise_threshold noise_threshold
                        How much noise should be added? Noise shouldn't
                        comprise more than the maximum fraction threshold of
                        the initial PCR pool (before first amplification).
                        Default: 0.05
  -f n_floor, --floor n_floor
                        Parameter used in calculating the minimum number of
                        STRs in a molecule for it to be included in PCR
                        cycles. The formula stands as follows: min_strs =
                        max(1, min(alleles_in_input) - n_floor), where alleles
                        are expressed as the number of repetitions of the
                        motif and n_floor is a parameter defined by this
                        option. If set to -1 minimum number of STRs set to 1.
                        Default: 5
  -j n_one_allele_threshold, --one_allele n_one_allele_threshold
                        Number of reads supporting only one allele for it to
                        be included in the output. Default: 40
  -e MIN MAX, --efficiency MIN MAX
                        PCR efficiency before-after per cycle, i.e.
                        probability of the amplification. Default: (0.001,
                        0.1)
  -d MIN MAX, --down MIN MAX
                        Per unit probability of down-slippage - generating a
                        molecule with less repeats (min and max). Default: (0,
                        0.1)
  -u MIN MAX, --up MIN MAX
                        Per unit probability of up-slippage - generating a
                        molecule with more repeats (min and max). Default: (0,
                        0.1)
  -k MIN MAX, --capture MIN MAX
                        Capture parameter (min and max). Values below zero
                        favor capturing short alleles. Default: (-0.25, 0.25)
  --add_ratios ratios   Semicolon separated additional ratios to be calculated
                        and reported in the last column of the output file.
                        Example: 0.5;0.6;0.8;0.9 - median, 60th, 80th and 90th
                        lnL percentile ratios will be calculated and reported.
  -m, --vcf_mode        VCF file provided. Assuming that different samples, if
                        more than one is present, are put in the consecutive
                        columns, starting with 10th. Default: string mode.
  --monte_carlo         Run SONiCS in Monte Carlo mode. Increased number of
                        repetitions recommended
  --random              Randomly select alleles for simulations from the
                        input. Default: randomly select only one of the
                        alleles, the other is chosen based on the support
                        information from input.
  --save_report         Save full report - including the parameters for each
                        simulation. The files will be named with block and
                        sample name, and stored in the output directory.
  --up_preference       Up-stutter doesn't have to be less probable than down
                        stutter. Default: probability of down-stutter must be
                        higher than the probability of up-stutter.
  -v, --verbose         Verbose mode.
  --version             show program's version number and exit

"""

import re
import os
import argparse
import logging
import time
import shutil
from sys import path
from itertools import repeat
from multiprocessing import Pool
import numpy as np
import sonics

__author__ = "Katarzyna Kedzierska"
__email__ = "kzk5f@virginia.edu"

DESC = """SONiCS - Stutter mONte Carlo Simulation.

SONiCS is a stutter correction algorithm based on derivative of Monte Carlo approach. Briefly, SONiCS models independent PCR reactions where set of reaction parameters including the efficiency of amplification, efficiency of capture, and the probability of polymerase slippage modeled separately for insertions and deletions are drawn from weak uniform priors based on experimental observations or user inputs. Initial alleles are chosen randomly. For each simulation sonics assigns log-likelihood (lnL) value describing the probability of generating the input readout from the PCR pool created in a given simulation. When a certain number of simulations are generated Mann-Whitney U test between the lnL distributions is performed and lnL ratios are calculated (for maximal and 75th percentile values). If the conditions of the successful run are not met SONiCS performs additional simulations until the maximum number of repetitions is reached, or it can call a genotype. As a result, program reports the called genotype together with descriptors of the best model. SONiCS can also be run in strictly Monte Carlo mode (with the option --monte_carlo). For more look in the README file.
"""

def run_sonics(feed_in, constants, ranges, sonics_run_options):
    #check if dir exists, if not create
    try:
        os.stat(sonics_run_options['out_path'])
    except FileNotFoundError:
        os.mkdir(sonics_run_options['out_path'])

    #output file path
    out_file_path = os.path.join(sonics_run_options['out_path'], 
                                 sonics_run_options['file_name'])
    sonics_run_options['out_file_path'] = out_file_path

    #Write header to the file
    with open(out_file_path, "w+") as out_file:
      if sonics_run_options['monte_carlo']:
         out_file.write(
          "\t".join([
            "sample",
            "block",
            "ref",
            "genotype",
            "identity",
            "identity_75th_percentile",
            "r_squared",
            "r_squared_75th_percentile",
            "lnL",
            "lnL_75th_percentile",
            "repeats\n"
          ])
        )
      else:
        out_file.write(
          "\t".join([
            "sample",
            "block",
            "ref",
            "genotype",
            "identity",
            "r_squared",
            "lnL",
            "filter",
            "MWUtes_pval",
            "best_lnL_ratio",
            "quartile_lnL_ratio",
            "repeats", 
            "additional_ratios\n"
          ])
        )

    if sonics_run_options['vcf_mode']:

        parser_out = parse_vcf(feed_in, sonics_run_options['strict'])

        if not parser_out:
            raise Exception("No valid genotype after parsing VCF file.")

        if sonics_run_options['processes'] > 1:
            pool = Pool(sonics_run_options['processes'])
            pool.starmap(process_one_genotype, zip(parser_out,
                                                   repeat(constants),
                                                   repeat(ranges),
                                                   repeat(sonics_run_options)))

        else:
            list(map(process_one_genotype,
                     parser_out,
                     repeat(constants),
                     repeat(ranges),
                     repeat(sonics_run_options)))

    else:
        genotype = feed_in
        input_tuple = (
            sonics_run_options['name'],
            sonics_run_options['block'],
            ".",
            genotype
        )

        process_one_genotype(
            input_tuple,
            constants,
            ranges,
            sonics_run_options
        )

def parse_vcf(file_path, strict=1):
    """
    Transforms genotype from lobSTR VCF file (i.e. all1:#;all2:#;all3:#,
    where allele is presented as number of nucleotides difference from
    reference). To do so, the function first extracts number of
    repetitions in the reference, length of the reference and genotype
    to be transformed and then each value from allele field is dived
    by the length of the motif and the reference is added.

    Example of transformation

    in: REF=10, MOTIF=TCTA, GT=-4|1;0|48
    out: GT=9|1;0:48.

    If support for partial alleles encountered strict argument
    determines the procedure. 0 - support from partial alleles is
    transfered to one of the two closest alleles; 1 - partial allele
    is excluded; 2 - particular genotype is excluded from simulation.
    """
    genotypes_list = []
    regexp_ref = re.compile(".*REF=([0-9.]*);.*")
    regexp_motif = re.compile(".*MOTIF=([TCGA]*);.*")
    with open(file_path, "r") as file:
        for line in file:
            sample_ind = 9 #sample index
            if line.startswith("#"):
                if line.startswith("#CHROM"):
                    samples = line.strip("\n").split("\t")[sample_ind:]
                continue
            line_list = line.split("\t")
            block_name = line_list[0]
            info_field = line_list[7]
            try:
                ref = int(regexp_ref.search(info_field).group(1).split(".")[0])
            except AttributeError:
                raise Exception(("There's something wrong with the vcf file, "
                                 "expecting REF in the INFO field "
                                 "in the 8th column."))
            try:
                motif_length = len(regexp_motif.search(info_field).group(1))
            
            except AttributeError:
                raise Exception(("There's something wrong with the vcf file, "
                                 "expecting MOTIF in the INFO field "
                                 "in the 8th column."))

            all_reads_loc = line_list[8].split(":").index("ALLREADS")

            for sample in samples:
                try:
                  gt_string = line_list[sample_ind].split(":")[all_reads_loc]
                except IndexError:
                  logging.warning(("Missing ALLREADS field in the input for"
                                   "block: %s, sample: %s"), 
                                  block_name, sample)
                  continue

                gt_list = gt_string.split(";")
                alleles_list = [
                    int(f.split("|")[0]) / motif_length + ref for f in gt_list
                ]
                alleles = np.array(alleles_list)
                support = np.array([f.split("|")[1] for f in gt_list],
                                   dtype=int)
                diff = alleles % 1
                if sum(diff != 0) > 0:
                    if strict == 2:
                        logging.warning(("Partial repetition of the motif in "
                                         "block: %s sample: %s. "
                                         "Excluding."), block_name, sample)
                        continue
                    elif strict == 0:
                        logging.warning(("Partial repetition of the motif in "
                                         "block: %s, sample: %s. Adding "
                                         "support from partial allele to one "
                                         "of the closest allele on random."),
                                        block_name, sample)

                        for partial in alleles[diff != 0]:
                            choice = np.random.choice([0, 1])
                            support[int(partial) + choice] += support[partial]
                            support[diff.nonzero()[0]] = 0
                    else:
                        logging.warning(("Partial repetition of the motif in "
                                         "block: %s sample: %s. Excluding "
                                         "allele."), block_name, sample)
                        for partial in alleles[diff != 0]:
                            support[diff.nonzero()[0]] = 0

                zipas = zip(alleles, support)
                genot_list = [
                    "%i|%i" %(a, s) for a, s in zipas if s > 0 and a > 0
                ]
                genot = ";".join(genot_list)
                genotypes_list.append((sample, block_name, ref, genot))
                sample_ind += 1
    return genotypes_list

def process_one_genotype(input_tuple, constants, ranges, options):
    """runs one Monte Carlo simulation"""
    #repetitions, verbose, out_file_path, out_path = options
    out_file_path = options['out_file_path']
    name, block, ref, genotype = input_tuple
    alleles, constants['max_allele'], n_alleles = sonics.get_alleles(genotype)
    constants['genotype_total'] = sum(alleles)

    if n_alleles == 0:
      #TODO: implement printing: block name . . . . 0 
      logging.warning(("No alleles provided in input, "
                       "skipping this genotype: %s "
                       "for sample: %s."), block, name)
      return

    elif n_alleles == 1:
      if constants['genotype_total'] > constants['one_allele_threshold']:
        one_allele = alleles.nonzero()[0][0]
        filt = "no_simulations"
        if options['monte_carlo']:
          result = "\t".join([
            "{}/{}".format(one_allele, one_allele), #genotype
            ".", #"identity",
            ".", #"identity_75th_percentile",
            ".", #"r_squared",
            ".", #"r_squared_75th_percentile",
            ".", #"lnL",
            ".", #"lnL_75th_percentile",
            "0" #"repeats"
          ])
        else:
          result = "\t".join([
              "{}/{}".format(one_allele, one_allele), #genotype
              ".", #"identity",
              ".", #"r_squared",
              ".", #"lnL",
              filt, #"filter",
              ".", #"MWUtes_pval",
              ".", #"best_lnL_ratio",
              ".", #"median_lnL_ratio",
              "0", #"repeats"
              "." #additional data
          ])
          logging.debug(result)
          logging.warning(("Only one allele provided in input, "
                           "with read support above the threshold. "
                           "Including this genotype: %s "
                           "for sample: %s in the output. "
                           "The simulation won't be performed and "
                           "likelihood won't be calculated."), block, name)
          logging.info(result)
          with open(out_file_path, "a+") as out_file:
            out_file.write("{}\t{}\t{}\t{}\n".format(name, block, ref, result))
          return
      else:
        logging.warning(("Only one allele provided in input, "
                         "with read support below the threshold. "
                         "Skipping this genotype: %s "
                         "for sample: %s in the output."), block, name)
      return


    #determine if can add noise
    frac = (np.amin(alleles[alleles.nonzero()])
            / sum(alleles)
            * np.count_nonzero(alleles))
    noise_frac = frac / (frac + 1)
    if noise_frac < constants['noise_threshold']:
      noise_coef = (np.amin(alleles[alleles.nonzero()])
                    / sum(alleles))
    else:
      noise_coef = 0

    constants['alleles'] = alleles
    constants['noise_coef'] = noise_coef

    logging.info("Initiating simulation for %s %s", name, block)

    options['block'] = block
    options['name'] = name

    start = time.time()
    result = sonics.monte_carlo(
        options['repetitions'],
        constants,
        ranges,
        options
    )
    elapsed = time.time() - start

    logging.info(result)
    with open(out_file_path, "a+") as out_file:
        out_file.write("{}\t{}\t{}\t{}\n".format(name, block, ref, result))

    logging.debug("Monte Carlo simulation took: %f second(s)", elapsed)

def main():
    with open(path[0]+'/VERSION',"r") as version_file:
        version = version_file.read().strip()

    parser = argparse.ArgumentParser(
        prog="sonics",
        description=DESC
    )
    parser.add_argument(
        "INPUT",
        type=str,
        help=("Either:"
              "allele composition - number of reads per allele, "
              "example: all1|reads;all2|reads or path to a VCF file "
              "if run with --vcf_mode option")
    )

    ### OPTIONS
    parser.add_argument(
        "-o", "--out_path",
        type=str,
        default=".",
        help=("Directory where output files will be stored. Warning: SONiCS "
              "will overwrite  results from previous runs stored in the same "
              "directory if the file name won't be changed. Default: ."),
        metavar="out_path"
    )
    parser.add_argument(
        "-n", "--file_name",
        type=str,
        default="sonics_out.txt",
        metavar="file_name",
        help="Output file name. Default: sonics_out.txt"
    )
    parser.add_argument(
        "-p", "--processes",
        type=int,
        default=0,
        metavar="n_processes",
        help=("Number of sub-processes used in multiprocessing mode. "
              "It can be understood as additional processes lunched by "
              "the main sonics process and 0 means that SONiCS won't "
              "lunch additional processes. "
              "This option is valid only in VCF mode. Default: 0"))
    parser.add_argument(
        "-t", "--strict",
        type=int,
        default=1,
        metavar="n_strict",
        help=("What to do when encountered partial repetitions of the motif "
              "while parsing the VCF file. Options: 0 - pick on random one of "
              "the closest alleles, 1 - exclude given STR, 2 - exclude given "
              "genotype. Default: 1")
    )
    parser.add_argument(
        "-y", "--pcr_cycles",
        type=int,
        default=12,
        metavar="n_pcr_cycles",
        help=("Number of PCR cycles before introducing capture step. "
              "Default: 12")
    )
    parser.add_argument(
        "-c", "--after_capture",
        type=int,
        default=12,
        metavar="n_after_capture",
        help=("How many cycles of PCR amplification were performed after "
              "introducing capture step. Default: 12")
    )
    parser.add_argument(
        "-b", "--block",
        type=str,
        default="Block",
        metavar="block_id",
        help=("Block name, valid only with string genotype as input. "
              "Default: Block")
    )
    parser.add_argument(
        "-a", "--name",
        type=str,
        default="sample",
        metavar="sample_name",
        help=("Sample name, valid only with string genotype as input. "
              "Default: sample")
    )
    parser.add_argument(
        "-r", "--repetitions",
        default=1000,
        type=int,
        metavar="n_repetitions",
        help="Number of maximum repetitions in the simulations. Default: 1000"
    )
    parser.add_argument(
        "-g", "--padjust",
        metavar="p_adjust_threshold",
        type=float,
        default=0.001,
        help="Adjusted p-value threshold for selecting the allele. "
             "Default: 0.001"
    )
    parser.add_argument(
        "-i", "--lnL_threshold",
        metavar="lnL_threshold",
        type=float,
        default=2.3,
        help="Log-likelihood (lnL) ratio threshold. Default: 2.3"
    )
    parser.add_argument(
        "-s", "--start_copies",
        default=300000,
        type=int,
        metavar="n_star_copies",
        help="Number of start copies. Default: 300000"
    )
    parser.add_argument(
        "-l", "--noise_threshold", #noise ~ loud
        default=0.05,
        type=float,
        metavar="noise_threshold",
        help=("How much noise should be added? Noise shouldn't comprise more "
              "than the maximum fraction threshold of the initial PCR pool "
              "(before first amplification). Default: 0.05") 
    )
    parser.add_argument(
        "-f", "--floor",
        type=int,
        default=5,
        metavar="n_floor",
        help=("Parameter used in calculating the minimum number of STRs in "
              "a molecule for it to be included in PCR cycles. The formula "
              "stands as follows: "
              "min_strs = max(1, min(alleles_in_input) - n_floor), "
              "where alleles are expressed as the number of repetitions of "
              "the motif and n_floor is a parameter defined by this option. "
              "If set to -1 minimum number of STRs set to 1. "
              "Default: 5")
    )
    parser.add_argument(
        "-j", "--one_allele",
        type=int,
        default=40,
        metavar="n_one_allele_threshold",
        help=("Number of reads supporting only one allele for it to be "
              "included in the output. Default: 40")
    )
    parser.add_argument(
        "-e", "--efficiency",
        nargs=2,
        default=(0.001, 0.1),
        metavar=('MIN', 'MAX'),
        type=float,
        help=("PCR efficiency before-after per cycle, i.e. probability of the "
              "amplification. Default: (0.001, 0.1)")
    )
    parser.add_argument(
        "-d", "--down",
        nargs=2,
        metavar=('MIN', 'MAX'),
        type=float,
        default=(0, 0.1),
        help=("Per unit probability of down-slippage - generating a molecule "
              "with less repeats (min and max). Default: (0, 0.1)")
    )
    parser.add_argument(
        "-u", "--up",
        nargs=2,
        metavar=('MIN', 'MAX'),
        type=float,
        default=(0, 0.1),
        help=("Per unit probability of up-slippage - generating a molecule "
              "with more repeats (min and max). Default: (0, 0.1)")
    )
    parser.add_argument(
        "-k", "--capture",
        nargs=2,
        default=(-0.25, 0.25),
        type=float,
        metavar=('MIN', 'MAX'),
        help=("Capture parameter (min and max). Values below zero favor "
              "capturing short alleles. Default: (-0.25, 0.25)")
    )
    parser.add_argument(
        "--add_ratios",
        default="",
        type=str,
        metavar="ratios",
        help=("Semicolon separated additional ratios to be calculated "
              "and reported in the last column of the output file. "
              "Example: 0.5;0.6;0.8;0.9 - median, 60th, 80th and 90th "
              "lnL percentile ratios will be calculated and reported." )
    )
    parser.add_argument(
        "-m", "--vcf_mode",
        action="store_true",
        default=False,
        help=("VCF file provided. Assuming that different samples, if more "
              "than one is present, are put in the consecutive columns, "
              "starting with 10th. Default: string mode.")
    )
    parser.add_argument(
        "--monte_carlo",
        action="store_true",
        default=False,
        help=("Run SONiCS in Monte Carlo mode. "
              "Increased number of repetitions recommended")
    )
    parser.add_argument(
        "--random",
        action="store_true",
        help=("Randomly select alleles for simulations from the input. "
              "Default: randomly select only one of the alleles, the other "
              "is chosen based on the support information from input.")
    )
    parser.add_argument(
        "--save_report",
        action="store_true",
        default=False,
        help=("Save full report - including the parameters for each "
              "simulation. The files will be named with block "
              "and sample name, and stored in the output directory.")
    )
    parser.add_argument(
        "--up_preference",
        action="store_true",
        help=("Up-stutter doesn't have to be less probable than down stutter. "
              "Default: probability of down-stutter must be higher than the "
              "probability of up-stutter.")
    )
    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="Verbose mode."
    )
    parser.add_argument(
        '--version',
        action='version',
        version='%(prog)s {}'.format(version)
    )

    args = parser.parse_args()
    if args.verbose:
        logging.basicConfig(
            level=logging.DEBUG,
            format="%(asctime)s %(levelname)s %(message)s"
        )
    else:
        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s %(levelname)s %(message)s"
        )

    logging.debug('SONiCS run with the following options:')
    logging.debug(args)

    #first cycle of reamplification after capture is the capture step
    capture_cycle = args.pcr_cycles + 1
    n_cycles = args.pcr_cycles + args.after_capture

    constants = {
        'random': args.random,
        'n_cycles': n_cycles,
        'capture_cycle': capture_cycle,
        'up_preference': args.up_preference,
        'floor': args.floor,
        'lnL_threshold': args.lnL_threshold,
        'start_copies': args.start_copies,
        'genotype': args.INPUT,
        'padjust': args.padjust,
        'noise_threshold': args.noise_threshold,
        'one_allele_threshold': args.one_allele
    }

    ranges = (
        args.down,
        args.up,
        args.capture,
        args.efficiency
    )

    verb = True if args.verbose else False

    sonics_run_options = {
        'repetitions': args.repetitions,
        'out_path': args.out_path,
        'strict': args.strict,
        'file_name': args.file_name,
        'vcf_mode': args.vcf_mode,
        'name': args.name,
        'block': args.block,
        'processes': args.processes,
        'verbose': verb,
        'save_report' : args.save_report,
        'monte_carlo': args.monte_carlo,
        'add_ratios': args.add_ratios
    }

    run_sonics(
        feed_in=args.INPUT,
        constants=constants,
        ranges=ranges,
        sonics_run_options=sonics_run_options
    )

if __name__ == '__main__':
    main()